result.sfc <- t(apply(theta,1, FUN = function(x) run.model(x, 12,"sfc")))
result.fp <- t(apply(theta,1, FUN = function(x)  run.model(x, 12,"fp")))
costs <- getCosts(result.sfc,result.fp )
colnames(costs) <- c("sfc","fp")
effects <- getEffects(result.sfc,result.fp )
colnames(effects) <- c("sfc","fp")
NB <- getNB(costs, effects, lambda =2*10^4)
colnames(NB) <- c("sfc","fp")
plot(y=costs[,2]-costs[,1], x= effects[,2]-effects[,1])
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
rm(list=ls())
source("psa.r")
# create theta
J <- 10^3
theta<-generate.psa(10^3)
result.sfc <- t(apply(theta,1, FUN = function(x) run.model(x, 12,"sfc")))
result.fp <- t(apply(theta,1, FUN = function(x)  run.model(x, 12,"fp")))
costs <- getCosts(result.sfc,result.fp )
colnames(costs) <- c("sfc","fp")
effects <- getEffects(result.sfc,result.fp )
colnames(effects) <- c("sfc","fp")
NB <- getNB(costs, effects, lambda =2*10^4)
colnames(NB) <- c("sfc","fp")
plot(y=costs[,2]-costs[,1], x= effects[,2]-effects[,1])
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
rm(list=ls())
source("psa.r")
# create theta
J <- 10^3
theta<-generate.psa(10^3)
result.sfc <- t(apply(theta,1, FUN = function(x) run.model(x, 12,"sfc")))
result.fp <- t(apply(theta,1, FUN = function(x)  run.model(x, 12,"fp")))
costs <- getCosts(result.sfc,result.fp )
colnames(costs) <- c("sfc","fp")
effects <- getEffects(result.sfc,result.fp )
colnames(effects) <- c("sfc","fp")
NB <- getNB(costs, effects, lambda =2*10^4)
colnames(NB) <- c("sfc","fp")
plot(y=costs[,2]-costs[,1], x= effects[,2]-effects[,1])
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
rm(list=ls())
source("psa.r")
# create theta
J <- 10^3
theta<-generate.psa(10^3)
result.sfc <- t(apply(theta,1, FUN = function(x) run.model(x, 12,"sfc")))
result.fp <- t(apply(theta,1, FUN = function(x)  run.model(x, 12,"fp")))
costs <- getCosts(result.sfc,result.fp )
colnames(costs) <- c("sfc","fp")
effects <- getEffects(result.sfc,result.fp )
colnames(effects) <- c("sfc","fp")
NB <- getNB(costs, effects, lambda =2*10^4)
colnames(NB) <- c("sfc","fp")
plot(y=costs[,2]-costs[,1], x= effects[,2]-effects[,1])
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
rm(list=ls())
source("psa.r")
# create theta
J <- 10^3
theta<-generate.psa(10^3)
result.sfc <- t(apply(theta,1, FUN = function(x) run.model(x, 12,"sfc")))
result.fp <- t(apply(theta,1, FUN = function(x)  run.model(x, 12,"fp")))
costs <- getCosts(result.sfc,result.fp )
colnames(costs) <- c("sfc","fp")
effects <- getEffects(result.sfc,result.fp )
colnames(effects) <- c("sfc","fp")
NB <- getNB(costs, effects, lambda =2*10^4)
colnames(NB) <- c("sfc","fp")
plot(y=costs[,2]-costs[,1], x= effects[,2]-effects[,1])
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
rm(list=ls())
source("psa.r")
# create theta
J <- 10^3
theta<-generate.psa(10^3)
result.sfc <- t(apply(theta,1, FUN = function(x) run.model(x, 12,"sfc")))
result.fp <- t(apply(theta,1, FUN = function(x)  run.model(x, 12,"fp")))
costs <- getCosts(result.sfc,result.fp )
colnames(costs) <- c("sfc","fp")
effects <- getEffects(result.sfc,result.fp )
colnames(effects) <- c("sfc","fp")
NB <- getNB(costs, effects, lambda =2*10^4)
colnames(NB) <- c("sfc","fp")
plot(y=costs[,2]-costs[,1], x= effects[,2]-effects[,1])
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
rm(list=ls())
source("psa.r")
# create theta
J <- 10^3
theta<-generate.psa(10^3)
result.sfc <- t(apply(theta,1, FUN = function(x) run.model(x, 12,"sfc")))
result.fp <- t(apply(theta,1, FUN = function(x)  run.model(x, 12,"fp")))
costs <- getCosts(result.sfc,result.fp )
colnames(costs) <- c("sfc","fp")
effects <- getEffects(result.sfc,result.fp )
colnames(effects) <- c("sfc","fp")
NB <- getNB(costs, effects, lambda =2*10^4)
colnames(NB) <- c("sfc","fp")
plot(y=costs[,2]-costs[,1], x= effects[,2]-effects[,1])
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
write.csv(theta,"ExcelMarkovModel/theta.csv", row.names=FALSE)
write.csv(costs, "ExcelMarkovModel/costs.csv",  row.names=FALSE)
write.csv(effects, "ExcelMarkovModel/effects.csv", row.names=FALSE)
k <- 2* 10^4
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
innerSamplej[,col] <- rep(as.list(x[counter,])[[index]], J-(J/10))
}
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", counter, "\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-sapply(1:nrow(theta), outerloop, theta)
NBs <- t(NBs)
evppi<-mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
evppi
k <- 2* 10^4
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
innerSamplej[,col] <- rep(as.list(x[counter,])[[index]], J)
}
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", counter, "\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-sapply(1:nrow(theta), outerloop, theta)
k <- 2* 10^4
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
innerSamplej[,col] <- rep(as.list(x[counter,])[[index]], J)
}
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", round((counter/nrow(x)) * 100, 2) , "%\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-sapply(1:nrow(theta), outerloop, theta)
NBs <- t(NBs)
evppi<-mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
evppi
mean(apply(NB, 1, max))-max(apply(NB,2, mean))
k <- 2* 10^4
size <- 10
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J*10/9)
valueinRow <- c()
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
valueinRow <- c(valueinRow, as.list(x[counter,])[[index]])
}
# Generate a new sample of size size
sfc.stw.prior <- c(211,61,1,2,2)
simulated <- t(rmultinom( n= J, size = size, valueinRow))
posteriorAlpha <- sweep(simulated,2,sfc.stw.prior,"+")
posterior <- t(apply(posteriorAlpha, 1, function(x){rdirichlet(1,x )}))
innerSamplej[,fixedColumns] <- posterior
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", counter, "\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-t(sapply(1:nrow(theta),outerloop,theta))
evsi<-mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
evsi
k <- 2* 10^4
size <- 10
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
valueinRow <- c()
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
valueinRow <- c(valueinRow, as.list(x[counter,])[[index]])
}
# Generate a new sample of size size
sfc.stw.prior <- c(211,61,1,2,2)
simulated <- t(rmultinom( n= J, size = size, valueinRow))
posteriorAlpha <- sweep(simulated,2,sfc.stw.prior,"+")
posterior <- t(apply(posteriorAlpha, 1, function(x){rdirichlet(1,x )}))
innerSamplej[,fixedColumns] <- posterior
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", counter, "\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-t(sapply(1:nrow(theta),outerloop,theta))
k <- 2* 10^4
size <- 10
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
valueinRow <- c()
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
valueinRow <- c(valueinRow, as.list(x[counter,])[[index]])
}
# Generate a new sample of size size
sfc.stw.prior <- c(211,61,1,2,2)
simulated <- t(rmultinom( n= J, size = size, valueinRow))
posteriorAlpha <- sweep(simulated,2,sfc.stw.prior,"+")
posterior <- t(apply(posteriorAlpha, 1, function(x){rdirichlet(1,x )}))
innerSamplej[,fixedColumns] <- posterior
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", round((counter/nrow(x)) * 100, 2) , "%\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-t(sapply(1:nrow(theta),outerloop,theta))
evsi<-mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
evsi
NBs
mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
k <- 2* 10^4
size <- 100
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
valueinRow <- c()
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
valueinRow <- c(valueinRow, as.list(x[counter,])[[index]])
}
# Generate a new sample of size size
sfc.stw.prior <- c(211,61,1,2,2)
simulated <- t(rmultinom( n= J, size = size, valueinRow))
posteriorAlpha <- sweep(simulated,2,sfc.stw.prior,"+")
posterior <- t(apply(posteriorAlpha, 1, function(x){rdirichlet(1,x )}))
innerSamplej[,fixedColumns] <- posterior
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", round((counter/nrow(x)) * 100, 2) , "%\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-t(sapply(1:nrow(theta),outerloop,theta))
evsi<-mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
evsi
k <- 2* 10^4
size <- 1000
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
valueinRow <- c()
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
valueinRow <- c(valueinRow, as.list(x[counter,])[[index]])
}
# Generate a new sample of size size
sfc.stw.prior <- c(211,61,1,2,2)
simulated <- t(rmultinom( n= J, size = size, valueinRow))
posteriorAlpha <- sweep(simulated,2,sfc.stw.prior,"+")
posterior <- t(apply(posteriorAlpha, 1, function(x){rdirichlet(1,x )}))
innerSamplej[,fixedColumns] <- posterior
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", round((counter/nrow(x)) * 100, 2) , "%\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-t(sapply(1:nrow(theta),outerloop,theta))
evsi<-mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
evsi
k <- 2* 10^4
size <- 10000
fixedColumns<- c("sfc: stw -> stw","sfc: stw -> utw","sfc: stw -> hex","sfc: stw -> pex","sfc: stw -> tf")
outerloop<-function(counter, x)
{
J <- 10^2
innerSamplej <- generate.psa(J)
valueinRow <- c()
for (col in fixedColumns){
index <- which(colnames(innerSamplej)==col)
valueinRow <- c(valueinRow, as.list(x[counter,])[[index]])
}
# Generate a new sample of size size
sfc.stw.prior <- c(211,61,1,2,2)
simulated <- t(rmultinom( n= J, size = size, valueinRow))
posteriorAlpha <- sweep(simulated,2,sfc.stw.prior,"+")
posterior <- t(apply(posteriorAlpha, 1, function(x){rdirichlet(1,x )}))
innerSamplej[,fixedColumns] <- posterior
InnerNB <- markov.model( innerSamplej, k)
cat(paste("counter:\t", round((counter/nrow(x)) * 100, 2) , "%\n"))
return(t(apply(InnerNB, 2, mean)))
}
NBs<-t(sapply(1:nrow(theta),outerloop,theta))
evsi<-mean(apply(NBs,1,max))-max(apply(NBs,2,mean))
evsi
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?list.files
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("htmltools")
library("bsplus")
install.packages("bsplus")
library(dplyt)
library(dplyt)
library(dplyr)
runApp()
library("bsplus")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?helpText
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyjs)
library(Shinyjs)
install.packages(Shinyjs)
install.packages(shinyjs)
install.packages(shinyjs)
install.packages("shinyjs")
runApp()
library(shinyjs)
runApp()
install.packages("V8")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
require(plotly)
?plot_ly
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
shiny::runApp()
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rweibul?
rweibul
?rweibul
?rweibull
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
